{"ast":null,"code":"// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\"); // ##############################\n// // // variables used to create animation on charts\n// #############################\n\n\nvar delays = 80,\n    durations = 500;\nvar delays2 = 80,\n    durations2 = 500; // ##############################\n// // // Daily Sales\n// #############################\n\nfunction occupancyStatsChart(seriesIn) {\n  return {\n    data: {\n      labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\n      series: seriesIn\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: 0,\n      high: 80,\n      // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 100,\n        right: 60,\n        bottom: 100,\n        left: 60\n      }\n    },\n    // for animation\n    animation: {\n      draw: function draw(data) {\n        if (data.type === \"line\" || data.type === \"area\") {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === \"point\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  };\n}\n\n; // ##############################\n// // // Email Subscriptions\n// #############################\n\nfunction spaceUsageChart(seriesIn) {\n  return {\n    data: {\n      labels: [\"Stand\", \"Sit\"],\n      series: seriesIn\n    },\n    options: {\n      axisX: {\n        showGrid: false\n      },\n      low: 0,\n      high: 80,\n      chartPadding: {\n        top: 0,\n        right: 5,\n        bottom: 0,\n        left: 0\n      },\n      horizontalBars: true\n    },\n    responsiveOptions: [[\"screen and (max-width: 640px)\", {\n      seriesBarDistance: 5,\n      axisX: {\n        labelInterpolationFnc: function labelInterpolationFnc(value) {\n          return value[0];\n        }\n      }\n    }]],\n    animation: {\n      draw: function draw(data) {\n        if (data.type === \"bar\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays2,\n              dur: durations2,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  };\n}\n\n; // ##############################\n// // // Completed Tasks\n// #############################\n\nfunction roomUsageChart(seriesIn) {\n  return {\n    data: {\n      labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n      series: seriesIn\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: 0,\n      high: 80,\n      // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    },\n    animation: {\n      draw: function draw(data) {\n        if (data.type === \"line\" || data.type === \"area\") {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === \"point\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  };\n}\n\n;\nmodule.exports = {\n  occupancyStatsChart: occupancyStatsChart,\n  spaceUsageChart: spaceUsageChart,\n  roomUsageChart: roomUsageChart\n};","map":{"version":3,"sources":["/home/zerosum24/Documents/Computer_Science/Fourth_Year/Sem_Two/IoTSSC/cw/Codebase/Dashboard/material-dashboard-react/src/variables/chartsDetails.jsx"],"names":["Chartist","require","delays","durations","delays2","durations2","occupancyStatsChart","seriesIn","data","labels","series","options","lineSmooth","Interpolation","cardinal","tension","low","high","chartPadding","top","right","bottom","left","animation","draw","type","element","animate","d","begin","dur","from","path","clone","scale","translate","chartRect","height","stringify","to","easing","Svg","Easing","easeOutQuint","opacity","index","spaceUsageChart","axisX","showGrid","horizontalBars","responsiveOptions","seriesBarDistance","labelInterpolationFnc","value","roomUsageChart","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;AACA;;;AACA,IAAIC,MAAM,GAAG,EAAb;AAAA,IACEC,SAAS,GAAG,GADd;AAEA,IAAIC,OAAO,GAAG,EAAd;AAAA,IACEC,UAAU,GAAG,GADf,C,CAGA;AACA;AACA;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CADJ;AAEJC,MAAAA,MAAM,EAAEH;AAFJ,KADD;AAKLI,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAEZ,QAAQ,CAACa,aAAT,CAAuBC,QAAvB,CAAgC;AAC1CC,QAAAA,OAAO,EAAE;AADiC,OAAhC,CADL;AAIPC,MAAAA,GAAG,EAAE,CAJE;AAKPC,MAAAA,IAAI,EAAE,EALC;AAKG;AACVC,MAAAA,YAAY,EAAE;AACZC,QAAAA,GAAG,EAAE,GADO;AAEZC,QAAAA,KAAK,EAAE,EAFK;AAGZC,QAAAA,MAAM,EAAE,GAHI;AAIZC,QAAAA,IAAI,EAAE;AAJM;AANP,KALJ;AAkBL;AACAC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,YAAIA,IAAI,CAACiB,IAAL,KAAc,MAAd,IAAwBjB,IAAI,CAACiB,IAAL,KAAc,MAA1C,EAAkD;AAChDjB,UAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBC,YAAAA,CAAC,EAAE;AACDC,cAAAA,KAAK,EAAE,GADN;AAEDC,cAAAA,GAAG,EAAE,GAFJ;AAGDC,cAAAA,IAAI,EAAEvB,IAAI,CAACwB,IAAL,CACHC,KADG,GAEHC,KAFG,CAEG,CAFH,EAEM,CAFN,EAGHC,SAHG,CAGO,CAHP,EAGU3B,IAAI,CAAC4B,SAAL,CAAeC,MAAf,EAHV,EAIHC,SAJG,EAHL;AAQDC,cAAAA,EAAE,EAAE/B,IAAI,CAACwB,IAAL,CAAUC,KAAV,GAAkBK,SAAlB,EARH;AASDE,cAAAA,MAAM,EAAExC,QAAQ,CAACyC,GAAT,CAAaC,MAAb,CAAoBC;AAT3B;AADgB,WAArB;AAaD,SAdD,MAcO,IAAInC,IAAI,CAACiB,IAAL,KAAc,OAAlB,EAA2B;AAChCjB,UAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,YAAAA,OAAO,EAAE;AACPf,cAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmB3C,MADnB;AAEP4B,cAAAA,GAAG,EAAE3B,SAFE;AAGP4B,cAAAA,IAAI,EAAE,CAHC;AAIPQ,cAAAA,EAAE,EAAE,CAJG;AAKPC,cAAAA,MAAM,EAAE;AALD;AADU,WAArB;AASD;AACF;AA3BQ;AAnBN,GAAP;AAiDD;;AAAA,C,CAED;AACA;AACA;;AAEA,SAASM,eAAT,CAAyBvC,QAAzB,EAAmC;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,CACN,OADM,EAEN,KAFM,CADJ;AAKJC,MAAAA,MAAM,EAAEH;AALJ,KADD;AAQLI,IAAAA,OAAO,EAAE;AACPoC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE;AADL,OADA;AAIPhC,MAAAA,GAAG,EAAE,CAJE;AAKPC,MAAAA,IAAI,EAAE,EALC;AAMPC,MAAAA,YAAY,EAAE;AACZC,QAAAA,GAAG,EAAE,CADO;AAEZC,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,MAAM,EAAE,CAHI;AAIZC,QAAAA,IAAI,EAAE;AAJM,OANP;AAYP2B,MAAAA,cAAc,EAAE;AAZT,KARJ;AAsBLC,IAAAA,iBAAiB,EAAE,CACjB,CACE,+BADF,EAEE;AACEC,MAAAA,iBAAiB,EAAE,CADrB;AAEEJ,MAAAA,KAAK,EAAE;AACLK,QAAAA,qBAAqB,EAAE,+BAASC,KAAT,EAAgB;AACrC,iBAAOA,KAAK,CAAC,CAAD,CAAZ;AACD;AAHI;AAFT,KAFF,CADiB,CAtBd;AAmCL9B,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,YAAIA,IAAI,CAACiB,IAAL,KAAc,KAAlB,EAAyB;AACvBjB,UAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,YAAAA,OAAO,EAAE;AACPf,cAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmBzC,OADnB;AAEP0B,cAAAA,GAAG,EAAEzB,UAFE;AAGP0B,cAAAA,IAAI,EAAE,CAHC;AAIPQ,cAAAA,EAAE,EAAE,CAJG;AAKPC,cAAAA,MAAM,EAAE;AALD;AADU,WAArB;AASD;AACF;AAbQ;AAnCN,GAAP;AAmDD;;AAAA,C,CAED;AACA;AACA;;AAEA,SAASc,cAAT,CAAwB/C,QAAxB,EAAkC;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CADJ;AAEJC,MAAAA,MAAM,EAAEH;AAFJ,KADD;AAKLI,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAEZ,QAAQ,CAACa,aAAT,CAAuBC,QAAvB,CAAgC;AAC1CC,QAAAA,OAAO,EAAE;AADiC,OAAhC,CADL;AAIPC,MAAAA,GAAG,EAAE,CAJE;AAKPC,MAAAA,IAAI,EAAE,EALC;AAKG;AACVC,MAAAA,YAAY,EAAE;AACZC,QAAAA,GAAG,EAAE,CADO;AAEZC,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,MAAM,EAAE,CAHI;AAIZC,QAAAA,IAAI,EAAE;AAJM;AANP,KALJ;AAkBLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAE,cAAShB,IAAT,EAAe;AACnB,YAAIA,IAAI,CAACiB,IAAL,KAAc,MAAd,IAAwBjB,IAAI,CAACiB,IAAL,KAAc,MAA1C,EAAkD;AAChDjB,UAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBC,YAAAA,CAAC,EAAE;AACDC,cAAAA,KAAK,EAAE,GADN;AAEDC,cAAAA,GAAG,EAAE,GAFJ;AAGDC,cAAAA,IAAI,EAAEvB,IAAI,CAACwB,IAAL,CACHC,KADG,GAEHC,KAFG,CAEG,CAFH,EAEM,CAFN,EAGHC,SAHG,CAGO,CAHP,EAGU3B,IAAI,CAAC4B,SAAL,CAAeC,MAAf,EAHV,EAIHC,SAJG,EAHL;AAQDC,cAAAA,EAAE,EAAE/B,IAAI,CAACwB,IAAL,CAAUC,KAAV,GAAkBK,SAAlB,EARH;AASDE,cAAAA,MAAM,EAAExC,QAAQ,CAACyC,GAAT,CAAaC,MAAb,CAAoBC;AAT3B;AADgB,WAArB;AAaD,SAdD,MAcO,IAAInC,IAAI,CAACiB,IAAL,KAAc,OAAlB,EAA2B;AAChCjB,UAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAb,CAAqB;AACnBiB,YAAAA,OAAO,EAAE;AACPf,cAAAA,KAAK,EAAE,CAACrB,IAAI,CAACqC,KAAL,GAAa,CAAd,IAAmB3C,MADnB;AAEP4B,cAAAA,GAAG,EAAE3B,SAFE;AAGP4B,cAAAA,IAAI,EAAE,CAHC;AAIPQ,cAAAA,EAAE,EAAE,CAJG;AAKPC,cAAAA,MAAM,EAAE;AALD;AADU,WAArB;AASD;AACF;AA3BQ;AAlBN,GAAP;AAgDD;;AAAA;AAEDe,MAAM,CAACC,OAAP,GAAiB;AACflD,EAAAA,mBAAmB,EAAnBA,mBADe;AAEfwC,EAAAA,eAAe,EAAfA,eAFe;AAGfQ,EAAAA,cAAc,EAAdA;AAHe,CAAjB","sourcesContent":["// ##############################\n// // // javascript library for creating charts\n// #############################\nvar Chartist = require(\"chartist\");\n\n// ##############################\n// // // variables used to create animation on charts\n// #############################\nvar delays = 80,\n  durations = 500;\nvar delays2 = 80,\n  durations2 = 500;\n\n// ##############################\n// // // Daily Sales\n// #############################\n\nfunction occupancyStatsChart(seriesIn) {\n  return {\n    data: {\n      labels: [\"M\", \"T\", \"W\", \"T\", \"F\", \"S\", \"S\"],\n      series: seriesIn\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: 0,\n      high: 80, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 100,\n        right: 60,\n        bottom: 100,\n        left: 60\n      }\n    },\n    // for animation\n    animation: {\n      draw: function(data) {\n        if (data.type === \"line\" || data.type === \"area\") {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path\n                .clone()\n                .scale(1, 0)\n                .translate(0, data.chartRect.height())\n                .stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === \"point\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  };\n};\n\n// ##############################\n// // // Email Subscriptions\n// #############################\n\nfunction spaceUsageChart(seriesIn) {\n  return {\n    data: {\n      labels: [\n        \"Stand\",\n        \"Sit\",\n      ],\n      series: seriesIn,\n    },\n    options: {\n      axisX: {\n        showGrid: false\n      },\n      low: 0,\n      high: 80,\n      chartPadding: {\n        top: 0,\n        right: 5,\n        bottom: 0,\n        left: 0\n      },\n      horizontalBars: true\n    },\n    responsiveOptions: [\n      [\n        \"screen and (max-width: 640px)\",\n        {\n          seriesBarDistance: 5,\n          axisX: {\n            labelInterpolationFnc: function(value) {\n              return value[0];\n            }\n          }\n        }\n      ]\n    ],\n    animation: {\n      draw: function(data) {\n        if (data.type === \"bar\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays2,\n              dur: durations2,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  };\n};\n\n// ##############################\n// // // Completed Tasks\n// #############################\n\nfunction roomUsageChart(seriesIn) {\n  return {\n    data: {\n      labels: [\"12am\", \"3pm\", \"6pm\", \"9pm\", \"12pm\", \"3am\", \"6am\", \"9am\"],\n      series: seriesIn,\n    },\n    options: {\n      lineSmooth: Chartist.Interpolation.cardinal({\n        tension: 0\n      }),\n      low: 0,\n      high: 80, // creative tim: we recommend you to set the high sa the biggest value + something for a better look\n      chartPadding: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    },\n    animation: {\n      draw: function(data) {\n        if (data.type === \"line\" || data.type === \"area\") {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path\n                .clone()\n                .scale(1, 0)\n                .translate(0, data.chartRect.height())\n                .stringify(),\n              to: data.path.clone().stringify(),\n              easing: Chartist.Svg.Easing.easeOutQuint\n            }\n          });\n        } else if (data.type === \"point\") {\n          data.element.animate({\n            opacity: {\n              begin: (data.index + 1) * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: \"ease\"\n            }\n          });\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = {\n  occupancyStatsChart,\n  spaceUsageChart,\n  roomUsageChart\n};\n"]},"metadata":{},"sourceType":"module"}