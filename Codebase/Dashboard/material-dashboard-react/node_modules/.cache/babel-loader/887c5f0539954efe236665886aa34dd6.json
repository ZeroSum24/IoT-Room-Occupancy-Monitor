{"ast":null,"code":"import _toConsumableArray from \"/home/zerosum24/Documents/Computer_Science/Fourth_Year/Sem_Two/IoTSSC/cw/Codebase/Dashboard/material-dashboard-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/zerosum24/Documents/Computer_Science/Fourth_Year/Sem_Two/IoTSSC/cw/Codebase/Dashboard/material-dashboard-react/src/components/Graphs/BarGraph.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { letterFrequency } from '@vx/mock-data';\nimport { Group } from '@vx/group';\nimport { Bar } from '@vx/shape';\nimport { scaleLinear, scaleBand } from '@vx/scale'; // We'll use some mock data from `@vx/mock-data` for this.\n\nvar data = letterFrequency; // Define the graph dimensions and margins\n\nvar width = 500;\nvar height = 500;\nvar margin = {\n  top: 20,\n  bottom: 20,\n  left: 20,\n  right: 20\n}; // Then we'll create some bounds\n\nvar xMax = width - margin.left - margin.right;\nvar yMax = height - margin.top - margin.bottom; // We'll make some helpers to get at the data we want\n\nvar x = function x(d) {\n  return d.letter;\n};\n\nvar y = function y(d) {\n  return +d.frequency * 100;\n}; // And then scale the graph by our data\n\n\nvar xScale = scaleBand({\n  rangeRound: [0, xMax],\n  domain: data.map(x),\n  padding: 0.4\n});\nvar yScale = scaleLinear({\n  rangeRound: [yMax, 0],\n  domain: [0, Math.max.apply(Math, _toConsumableArray(data.map(y)))]\n}); // Compose together the scale and accessor functions to get point functions\n\nvar compose = function compose(scale, accessor) {\n  return function (data) {\n    return scale(accessor(data));\n  };\n};\n\nvar xPoint = compose(xScale, x);\nvar yPoint = compose(yScale, y); // Finally we'll embed it all in an SVG\n\nfunction BarGraph(props) {\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, data.map(function (d, i) {\n    var barHeight = yMax - yPoint(d);\n    return React.createElement(Group, {\n      key: \"bar-\".concat(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      x: xPoint(d),\n      y: yMax - barHeight,\n      height: barHeight,\n      width: xScale.bandwidth(),\n      fill: \"#fc2e1c\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }));\n  }));\n}\n\nexport default BarGraph;","map":{"version":3,"sources":["/home/zerosum24/Documents/Computer_Science/Fourth_Year/Sem_Two/IoTSSC/cw/Codebase/Dashboard/material-dashboard-react/src/components/Graphs/BarGraph.js"],"names":["React","PropTypes","letterFrequency","Group","Bar","scaleLinear","scaleBand","data","width","height","margin","top","bottom","left","right","xMax","yMax","x","d","letter","y","frequency","xScale","rangeRound","domain","map","padding","yScale","Math","max","compose","scale","accessor","xPoint","yPoint","BarGraph","props","i","barHeight","bandwidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { letterFrequency } from '@vx/mock-data';\nimport { Group } from '@vx/group';\nimport { Bar } from '@vx/shape';\nimport { scaleLinear, scaleBand } from '@vx/scale';\n\n// We'll use some mock data from `@vx/mock-data` for this.\nconst data = letterFrequency;\n\n// Define the graph dimensions and margins\nconst width = 500;\nconst height = 500;\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\n\n// Then we'll create some bounds\nconst xMax = width - margin.left - margin.right;\nconst yMax = height - margin.top - margin.bottom;\n\n// We'll make some helpers to get at the data we want\nconst x = d => d.letter;\nconst y = d => +d.frequency * 100;\n\n// And then scale the graph by our data\nconst xScale = scaleBand({\n  rangeRound: [0, xMax],\n  domain: data.map(x),\n  padding: 0.4,\n});\nconst yScale = scaleLinear({\n  rangeRound: [yMax, 0],\n  domain: [0, Math.max(...data.map(y))],\n});\n\n// Compose together the scale and accessor functions to get point functions\nconst compose = (scale, accessor) => (data) => scale(accessor(data));\nconst xPoint = compose(xScale, x);\nconst yPoint = compose(yScale, y);\n\n// Finally we'll embed it all in an SVG\nfunction BarGraph(props) {\n  return (\n    <svg width={width} height={height}>\n      {data.map((d, i) => {\n        const barHeight = yMax - yPoint(d);\n        return (\n          <Group key={`bar-${i}`}>\n            <Bar\n              x={xPoint(d)}\n              y={yMax - barHeight}\n              height={barHeight}\n              width={xScale.bandwidth()}\n              fill='#fc2e1c'\n            />\n          </Group>\n        );\n      })}\n    </svg>\n  );\n}\n\nexport default (BarGraph)\n"]},"metadata":{},"sourceType":"module"}